services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ES_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./elasticsearch_snapshots:/usr/share/elasticsearch/snapshots
    networks:
      - rag-net

  rag-api:
    build: .
    image: dguilliams3/rag-api:latest
    container_name: rag_api
    env_file:
      - .env
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTIC_PASSWORD: ${ES_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GPT_MODEL: ${GPT_MODEL}
      GPT_SERVICE_URL: http://gpt-service:8001
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "5000:5000"
    volumes:
      - rag_indexes:/app/indexes
      - rag_data:/app/data
      - rag_logs:/app/logs
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - rag-net

  gpt-service:
    build:
      context: .
      dockerfile: Dockerfile.gpt_service
    image: dguilliams3/gpt-service:latest
    container_name: gpt_service
    env_file:
      - .env
    environment:
      GPT_SERVICE_URL: http://localhost:8001/generate
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8001:8001"
    depends_on:
      - kafka
    networks:
      - rag-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - rag-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - rag-net

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-token
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - rag-net

  metrics-consumer:
    build:
      context: ./app
      dockerfile: Dockerfile.metrics
    container_name: metrics_consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS
      - INFLUX_URL
      - INFLUX_TOKEN
      - INFLUX_ORG
      - INFLUX_BUCKET
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-net

  metrics-dashboard:
    build:
      context: ./app
      dockerfile: Dockerfile.metrics
    container_name: metrics_dashboard
    command: streamlit run metrics_dashboard.py
    ports:
      - "8501:8501"
    environment:
      - INFLUX_URL
      - INFLUX_TOKEN
      - INFLUX_ORG
      - INFLUX_BUCKET
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-net

volumes:
  es_data:
  rag_indexes:    # For FAISS indexes (faiss_index.bin, summaries_index.faiss, index_to_filename.json)
  rag_data:       # For summaries.json
  rag_logs:       # For context_log.log and app.log
  influxdb-data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:

networks:
  rag-net:
    driver: bridge
